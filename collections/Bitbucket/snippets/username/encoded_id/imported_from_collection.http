#!/usr/bin/env dothttp

# imported from 35240-bd1a5667-9165-48e8-9c3c-1bd94c10517b.postman_collection.json

// Deletes a snippet and returns an empty response.

@name("/snippets/:username/:encoded_id")
DELETE "https://{{baseUrl}}/snippets/:username/:encoded_id"


// Retrieves a single snippet.
// 
// Snippets support multiple content types:
// 
// * application/json
// * multipart/related
// * multipart/form-data
// 
// 
// application/json
// ----------------
// 
// The default content type of the response is `application/json`.
// Since JSON is always `utf-8`, it cannot reliably contain file contents
// for files that are not text. Therefore, JSON snippet documents only
// contain the filename and links to the file contents.
// 
// This means that in order to retrieve all parts of a snippet, N+1
// requests need to be made (where N is the number of files in the
// snippet).
// 
// 
// multipart/related
// -----------------
// 
// To retrieve an entire snippet in a single response, use the
// `Accept: multipart/related` HTTP request header.
// 
//     $ curl -H "Accept: multipart/related" https://api.bitbucket.org/2.0/snippets/evzijst/1
// 
// Response:
// 
//     HTTP/1.1 200 OK
//     Content-Length: 2214
//     Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
//     MIME-Version: 1.0
// 
//     --===============1438169132528273974==
//     Content-Type: application/json; charset="utf-8"
//     MIME-Version: 1.0
//     Content-ID: snippet
// 
//     {
//       "links": {
//         "self": {
//           "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj"
//         },
//         "html": {
//           "href": "https://bitbucket.org/snippets/evzijst/kypj"
//         },
//         "comments": {
//           "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/comments"
//         },
//         "watchers": {
//           "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/watchers"
//         },
//         "commits": {
//           "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/commits"
//         }
//       },
//       "id": kypj,
//       "title": "My snippet",
//       "created_on": "2014-12-29T22:22:04.790331+00:00",
//       "updated_on": "2014-12-29T22:22:04.790331+00:00",
//       "is_private": false,
//       "files": {
//         "foo.txt": {
//           "links": {
//             "self": {
//               "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/files/367ab19/foo.txt"
//             },
//             "html": {
//               "href": "https://bitbucket.org/snippets/evzijst/kypj#file-foo.txt"
//             }
//           }
//         },
//         "image.png": {
//           "links": {
//             "self": {
//               "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/files/367ab19/image.png"
//             },
//             "html": {
//               "href": "https://bitbucket.org/snippets/evzijst/kypj#file-image.png"
//             }
//           }
//         }
//       ],
//       "owner": {
//         "username": "evzijst",
//         "display_name": "Erik van Zijst",
//         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
//         "links": {
//           "self": {
//             "href": "https://api.bitbucket.org/2.0/users/evzijst"
//           },
//           "html": {
//             "href": "https://bitbucket.org/evzijst"
//           },
//           "avatar": {
//             "href": "https://bitbucket-staging-assetroot.s3.amazonaws.com/c/photos/2013/Jul/31/erik-avatar-725122544-0_avatar.png"
//           }
//         }
//       },
//       "creator": {
//         "username": "evzijst",
//         "display_name": "Erik van Zijst",
//         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
//         "links": {
//           "self": {
//             "href": "https://api.bitbucket.org/2.0/users/evzijst"
//           },
//           "html": {
//             "href": "https://bitbucket.org/evzijst"
//           },
//           "avatar": {
//             "href": "https://bitbucket-staging-assetroot.s3.amazonaws.com/c/photos/2013/Jul/31/erik-avatar-725122544-0_avatar.png"
//           }
//         }
//       }
//     }
// 
//     --===============1438169132528273974==
//     Content-Type: text/plain; charset="us-ascii"
//     MIME-Version: 1.0
//     Content-Transfer-Encoding: 7bit
//     Content-ID: "foo.txt"
//     Content-Disposition: attachment; filename="foo.txt"
// 
//     foo
// 
//     --===============1438169132528273974==
//     Content-Type: image/png
//     MIME-Version: 1.0
//     Content-Transfer-Encoding: base64
//     Content-ID: "image.png"
//     Content-Disposition: attachment; filename="image.png"
// 
//     iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAABD0lEQVR4Ae3VMUoDQRTG8ccUaW2m
//     TKONFxArJYJamCvkCnZTaa+VnQdJSBFl2SMsLFrEWNjZBZs0JgiL/+KrhhVmJRbCLPx4O+/DT2TB
//     cbblJxf+UWFVVRNsEGAtgvJxnLm2H+A5RQ93uIl+3632PZyl/skjfOn9Gvdwmlcw5aPUwimG+NT5
//     EnNN036IaZePUuIcK533NVfal7/5yjWeot2z9ta1cAczHEf7I+3J0ws9Cgx0fsOFpmlfwKcWPuBQ
//     73Oc4FHzBaZ8llq4q1mr5B2mOUCt815qYR8eB1hG2VJ7j35q4RofaH7IG+Xrf/PfJhfmwtfFYoIN
//     AqxFUD6OMxcvkO+UfKfkOyXfKdsv/AYCHMLVkHAFWgAAAABJRU5ErkJggg==
//     --===============1438169132528273974==--
// 
// multipart/form-data
// -------------------
// 
// As with creating new snippets, `multipart/form-data` can be used as an
// alternative to `multipart/related`. However, the inherently flat
// structure of form-data means that only basic, root-level properties
// can be returned, while nested elements like `links` are omitted:
// 
//     $ curl -H "Accept: multipart/form-data" https://api.bitbucket.org/2.0/snippets/evzijst/kypj
// 
// Response:
// 
//     HTTP/1.1 200 OK
//     Content-Length: 951
//     Content-Type: multipart/form-data; boundary=----------------------------63a4b224c59f
// 
//     ------------------------------63a4b224c59f
//     Content-Disposition: form-data; name="title"
//     Content-Type: text/plain; charset="utf-8"
// 
//     My snippet
//     ------------------------------63a4b224c59f--
//     Content-Disposition: attachment; name="file"; filename="foo.txt"
//     Content-Type: text/plain
// 
//     foo
// 
//     ------------------------------63a4b224c59f
//     Content-Disposition: attachment; name="file"; filename="image.png"
//     Content-Transfer-Encoding: base64
//     Content-Type: application/octet-stream
// 
//     iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAABD0lEQVR4Ae3VMUoDQRTG8ccUaW2m
//     TKONFxArJYJamCvkCnZTaa+VnQdJSBFl2SMsLFrEWNjZBZs0JgiL/+KrhhVmJRbCLPx4O+/DT2TB
//     cbblJxf+UWFVVRNsEGAtgvJxnLm2H+A5RQ93uIl+3632PZyl/skjfOn9Gvdwmlcw5aPUwimG+NT5
//     EnNN036IaZePUuIcK533NVfal7/5yjWeot2z9ta1cAczHEf7I+3J0ws9Cgx0fsOFpmlfwKcWPuBQ
//     73Oc4FHzBaZ8llq4q1mr5B2mOUCt815qYR8eB1hG2VJ7j35q4RofaH7IG+Xrf/PfJhfmwtfFYoIN
//     AqxFUD6OMxcvkO+UfKfkOyXfKdsv/AYCHMLVkHAFWgAAAABJRU5ErkJggg==
//     ------------------------------5957323a6b76--

@name("/snippets/:username/:encoded_id")
GET "https://{{baseUrl}}/snippets/:username/:encoded_id"


// Used to update a snippet. Use this to add and delete files and to
// change a snippet's title.
// 
// To update a snippet, one can either PUT a full snapshot, or only the
// parts that need to be changed.
// 
// The contract for PUT on this API is that properties missing from the
// request remain untouched so that snippets can be efficiently
// manipulated with differential payloads.
// 
// To delete a property (e.g. the title, or a file), include its name in
// the request, but omit its value (use `null`).
// 
// As in Git, explicit renaming of files is not supported. Instead, to
// rename a file, delete it and add it again under another name. This can
// be done atomically in a single request. Rename detection is left to
// the SCM.
// 
// PUT supports three different content types for both request and
// response bodies:
// 
// * `application/json`
// * `multipart/related`
// * `multipart/form-data`
// 
// The content type used for the request body can be different than that
// used for the response. Content types are specified using standard HTTP
// headers.
// 
// Use the `Content-Type` and `Accept` headers to select the desired
// request and response format.
// 
// 
// application/json
// ----------------
// 
// As with creation and retrieval, the content type determines what
// properties can be manipulated. `application/json` does not support
// file contents and is therefore limited to a snippet's meta data.
// 
// To update the title, without changing any of its files:
// 
//     $ curl -X POST -H "Content-Type: application/json" https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d '{"title": "Updated title"}'
// 
// 
// To delete the title:
// 
//     $ curl -X POST -H "Content-Type: application/json" https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d '{"title": null}'
// 
// Not all parts of a snippet can be manipulated. The owner and creator
// for instance are immutable.
// 
// 
// multipart/related
// -----------------
// 
// `multipart/related` can be used to manipulate all of a snippet's
// properties. The body is identical to a POST. properties omitted from
// the request are left unchanged. Since the `start` part contains JSON,
// the mechanism for manipulating the snippet's meta data is identical
// to `application/json` requests.
// 
// To update one of a snippet's file contents, while also changing its
// title:
// 
//     PUT /2.0/snippets/evzijst/kypj HTTP/1.1
//     Content-Length: 288
//     Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
//     MIME-Version: 1.0
// 
//     --===============1438169132528273974==
//     Content-Type: application/json; charset="utf-8"
//     MIME-Version: 1.0
//     Content-ID: snippet
// 
//     {
//       "title": "My updated snippet",
//       "files": {
//           "foo.txt": {}
//         }
//     }
// 
//     --===============1438169132528273974==
//     Content-Type: text/plain; charset="us-ascii"
//     MIME-Version: 1.0
//     Content-Transfer-Encoding: 7bit
//     Content-ID: "foo.txt"
//     Content-Disposition: attachment; filename="foo.txt"
// 
//     Updated file contents.
// 
//     --===============1438169132528273974==--
// 
// Here only the parts that are changed are included in the body. The
// other files remain untouched.
// 
// Note the use of the `files` list in the JSON part. This list contains
// the files that are being manipulated. This list should have
// corresponding multiparts in the request that contain the new contents
// of these files.
// 
// If a filename in the `files` list does not have a corresponding part,
// it will be deleted from the snippet, as shown below:
// 
//     PUT /2.0/snippets/evzijst/kypj HTTP/1.1
//     Content-Length: 188
//     Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
//     MIME-Version: 1.0
// 
//     --===============1438169132528273974==
//     Content-Type: application/json; charset="utf-8"
//     MIME-Version: 1.0
//     Content-ID: snippet
// 
//     {
//       "files": {
//         "image.png": {}
//       }
//     }
// 
//     --===============1438169132528273974==--
// 
// To simulate a rename, delete a file and add the same file under
// another name:
// 
//     PUT /2.0/snippets/evzijst/kypj HTTP/1.1
//     Content-Length: 212
//     Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
//     MIME-Version: 1.0
// 
//     --===============1438169132528273974==
//     Content-Type: application/json; charset="utf-8"
//     MIME-Version: 1.0
//     Content-ID: snippet
// 
//     {
//         "files": {
//           "foo.txt": {},
//           "bar.txt": {}
//         }
//     }
// 
//     --===============1438169132528273974==
//     Content-Type: text/plain; charset="us-ascii"
//     MIME-Version: 1.0
//     Content-Transfer-Encoding: 7bit
//     Content-ID: "bar.txt"
//     Content-Disposition: attachment; filename="bar.txt"
// 
//     foo
// 
//     --===============1438169132528273974==--
// 
// 
// multipart/form-data
// -----------------
// 
// Again, one can also use `multipart/form-data` to manipulate file
// contents and meta data atomically.
// 
//     $ curl -X PUT http://localhost:12345/2.0/snippets/evzijst/kypj             -F title="My updated snippet" -F file=@foo.txt
// 
//     PUT /2.0/snippets/evzijst/kypj HTTP/1.1
//     Content-Length: 351
//     Content-Type: multipart/form-data; boundary=----------------------------63a4b224c59f
// 
//     ------------------------------63a4b224c59f
//     Content-Disposition: form-data; name="file"; filename="foo.txt"
//     Content-Type: text/plain
// 
//     foo
// 
//     ------------------------------63a4b224c59f
//     Content-Disposition: form-data; name="title"
// 
//     My updated snippet
//     ------------------------------63a4b224c59f
// 
// To delete a file, omit its contents while including its name in the
// `files` field:
// 
//     $ curl -X PUT https://api.bitbucket.org/2.0/snippets/evzijst/kypj -F files=image.png
// 
//     PUT /2.0/snippets/evzijst/kypj HTTP/1.1
//     Content-Length: 149
//     Content-Type: multipart/form-data; boundary=----------------------------ef8871065a86
// 
//     ------------------------------ef8871065a86
//     Content-Disposition: form-data; name="files"
// 
//     image.png
//     ------------------------------ef8871065a86--
// 
// The explicit use of the `files` element in `multipart/related` and
// `multipart/form-data` is only required when deleting files.
// The default mode of operation is for file parts to be processed,
// regardless of whether or not they are listed in `files`, as a
// convenience to the client.

@name("/snippets/:username/:encoded_id")
PUT "https://{{baseUrl}}/snippets/:username/:encoded_id"


// Returns a paginated list of all users watching a specific snippet.

@name("/snippets/:username/:encoded_id/watchers")
GET "https://{{baseUrl}}/snippets/:username/:encoded_id/watchers"



