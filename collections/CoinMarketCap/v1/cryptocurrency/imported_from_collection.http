#!/usr/bin/env dothttp

# imported from 35240-a7221b4a-cbb4-447e-8e62-28d49f5ff065.postman_collection.json

// Returns all static metadata for one or more cryptocurrencies including name, symbol, logo, and its various registered URLs.
// 
// **This endpoint is available on the following API plans:**
// - Starter
// - Hobbyist
// - Standard
// - Professional
// - Enterprise
// 
// **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.

@name("Get metadata")
GET "https://{{baseUrl}}/v1/cryptocurrency/info"
? "id"= "<get>"
? "symbol"= "<get>"


// Returns a paginated list of all cryptocurrencies by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique cryptocurrency `id` across all endpoints as typical identifiers like ticker symbols can match multiple cryptocurrencies and change over time. As a convenience you may pass a comma-separated list of cryptocurrency symbols as `symbol` to filter this list to only those you require.
// 
// 
//   **This endpoint is available on the following API plans:**
//   - Start

@name("Get CoinMarketCap ID map")
GET "https://{{baseUrl}}/v1/cryptocurrency/map"
? "listing_status"= "<>"
? "start"= "<>"
? "limit"= "<>"
? "symbol"= "<get>"


// Lists all market pairs for the specified cryptocurrency with associated stats. Use the "convert" option to return market values in multiple fiat and cryptocurrency conversions in the same call.
// 
// 
//   **This endpoint is available on the following API plans:**
//   - ~~Starter~~
//   - ~~Hobbyist~~
//   - Standard
//   - Professional
//   - Enterprise
// 
// **Cache / Update frequency:** Every ~1 minute.

@name("Get market pairs (latest)")
GET "https://{{baseUrl}}/v1/cryptocurrency/market-pairs/latest"
? "id"= "<get>"
? "symbol"= "<get>"
? "start"= "<>"
? "limit"= "<>"
? "convert"= "<>"


// Return an interval of historic OHLCV (Open, High, Low, Close, Volume) market quotes for a cryptocurrency.
// 
// **Technical Details**
// One OHLCV quote will be returned for every "time_period" between your "time_start" and "time_end".
// If a "time_start" is not supplied, the "time_period" will be applied in reverse from "time_end".
// If "time_end" is not supplied, it defaults to the current time.
// If you don't need every "time_period" between your dates you may adjust the frequency that "time_period" is sam

@name("Get OHLCV values (historical)")
GET "https://{{baseUrl}}/v1/cryptocurrency/ohlcv/historical"
? "id"= "<get>"
? "symbol"= "<get>"
? "time_period"= "<>"
? "time_start"= "<>"
? "time_end"= "<>"
? "count"= "<>"
? "interval"= "<>"
? "convert"= "<>"



