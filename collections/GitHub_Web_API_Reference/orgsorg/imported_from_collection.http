#!/usr/bin/env dothttp

# imported from 35240-c446a4c9-8dd6-45c4-99f2-688a96fe76ae.postman_collection.json

// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
// 
// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see "[Response with GitHub plan information](https://developer.github.com/v3/orgs/#response-with-github-plan-information)."

@name("Get an organization")
GET "https://{{baseUrl}}/orgs/:org"


// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
// 
// Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.

@name("Update an organization")
PATCH "https://{{baseUrl}}/orgs/:org"
"Content-Type": "application/json"
json({
    "billing_email": "<string>",
    "company": "<string>",
    "email": "<string>",
    "twitter_username": "<string>",
    "location": "<string>",
    "name": "<string>",
    "description": "<string>",
    "has_organization_projects": "<boolean>",
    "has_repository_projects": "<boolean>",
    "default_repository_permission": "read",
    "members_can_create_repositories": true,
    "members_can_create_internal_repositories": "<boolean>",
    "members_can_create_private_repositories": "<boolean>",
    "members_can_create_public_repositories": "<boolean>",
    "members_allowed_repository_creation_type": "<string>",
    "blog": "<string>"
})


@name("List public organization events")
GET "https://{{baseUrl}}/orgs/:org/events"
? "per_page"= "30"
? "page"= "1"


// Enables an authenticated GitHub App to find the organization's installation information.
// 
// You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

@name("Get an organization installation for the authenticated app")
GET "https://{{baseUrl}}/orgs/:org/installation"


// Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.

@name("List app installations for an organization")
GET "https://{{baseUrl}}/orgs/:org/installations"
? "per_page"= "30"
? "page"= "1"


// List issues in an organization assigned to the authenticated user.
// 
// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
// request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.

@name("List organization issues assigned to the authenticated user")
GET "https://{{baseUrl}}/orgs/:org/issues"
? "filter"= "assigned"
? "state"= "open"
? "labels"= "<string>"
? "sort"= "created"
? "direction"= "desc"
? "since"= "<string>"
? "per_page"= "30"
? "page"= "1"


// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
// 
// List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
// 
// The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:

@name("List IdP groups for an organization")
GET "https://{{baseUrl}}/orgs/:org/team-sync/groups"
? "per_page"= "30"
? "page"= "1"



