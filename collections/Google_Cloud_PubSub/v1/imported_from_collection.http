#!/usr/bin/env dothttp

# imported from 35240-356dabf4-362f-4cbf-ab4e-4945c8de6175.postman_collection.json

// Creates the given topic with the given name.

@name("Create Topic")
PUT "https://{{baseUrl}}/v1/:name"


// Gets the access control policy for a resource.
// Returns an empty policy if the resource exists and does not have a policy
// set.

@name("Get IAM Policy")
GET "https://{{baseUrl}}/v1/{{resource}}:getIamPolicy"


// Sets the access control policy on the specified resource. Replaces any
// existing policy.

@name("Set IAM Policy")
POST "https://{{baseUrl}}/v1/{{resource}}:setIamPolicy"


// Returns permissions that a caller has on the specified resource.
// If the resource does not exist, this will return an empty set of
// permissions, not a NOT_FOUND error.
// 
// Note: This operation is designed to be used for building permission-aware
// UIs and command-line tools, not for authorization checking. This operation
// may "fail open" without warning.

@name("Test IAM Permission")
POST "https://{{baseUrl}}/v1/{{resource}}:testIamPermissions"


// Deletes an existing subscription. All messages retained in the subscription
// are immediately dropped. Calls to `Pull` after deletion will return
// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
// the same name, but the new one has no association with the old
// subscription or its topic unless the same topic is specified.

@name("Delete Subscription")
DELETE "https://{{baseUrl}}/v1/:subscription"


// Acknowledges the messages associated with the `ack_ids` in the
// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
// from the subscription.
// 
// Acknowledging a message whose ack deadline has expired may succeed,
// but such a message may be redelivered later. Acknowledging a message more
// than once will not result in an error.

@name("Acknowledge Subscription")
POST "https://{{baseUrl}}/v1/{{subscription}}:acknowledge"


// Modifies the ack deadline for a specific message. This method is useful
// to indicate that more time is needed to process a message by the
// subscriber, or to make the message available for redelivery if the
// processing was interrupted. Note that this does not modify the
// subscription-level `ackDeadlineSeconds` used for subsequent messages.

@name("Modify ACK Deadline")
POST "https://{{baseUrl}}/v1/{{subscription}}:modifyAckDeadline"


// Modifies the `PushConfig` for a specified subscription.
// 
// This may be used to change a push subscription to a pull one (signified by
// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
// attributes of a push subscription. Messages will accumulate for delivery
// continuously through the call regardless of changes to the `PushConfig`.

@name("Modify Push Configuration")
POST "https://{{baseUrl}}/v1/{{subscription}}:modifyPushConfig"


// Pulls messages from the server. Returns an empty list if there are no
// messages available in the backlog. The server may return `UNAVAILABLE` if
// there are too many concurrent pull requests pending for the given
// subscription.

@name("Pull Message")
POST "https://{{baseUrl}}/v1/{{subscription}}:pull"


// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
// does not exist. The message payload must not be empty; it must contain
//  either a non-empty data field, or at least one attribute.

@name("Publish Topic")
POST "https://{{baseUrl}}/v1/{{topic}}:publish"



