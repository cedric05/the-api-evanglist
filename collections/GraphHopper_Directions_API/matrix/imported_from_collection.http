#!/usr/bin/env dothttp

# imported from 35240-f1494990-6b2e-4273-b056-b290ffedd5ef.postman_collection.json

// base-inherit-auth

@name("base-inherit-auth")
GET "https://"


// With this Matrix Endpoint you submit the points and parameters via URL parameters and is the most convenient
// as it works out-of-the-box in the browser. If possible you should
// prefer using the [POST Matrix Endpoint](#operation/postMatrix) that avoids problems with many locations
// and automatically gzipps the request (note that all endpoints return gzipped results).

@name("GET Matrix Endpoint") : "base-inherit-auth"
GET "https://{{baseUrl}}/matrix"
? "point"= "<string>"
? "point"= "<string>"
? "from_point"= "<string>"
? "from_point"= "<string>"
? "to_point"= "<string>"
? "to_point"= "<string>"
? "point_hint"= "<string>"
? "point_hint"= "<string>"
? "from_point_hint"= "<string>"
? "from_point_hint"= "<string>"
? "to_point_hint"= "<string>"
? "to_point_hint"= "<string>"
? "snap_prevention"= "<string>"
? "snap_prevention"= "<string>"
? "curbside"= "<string>"
? "curbside"= "<string>"
? "from_curbside"= "<string>"
? "from_curbside"= "<string>"
? "to_curbside"= "<string>"
? "to_curbside"= "<string>"
? "out_array"= "<string>"
? "out_array"= "<string>"
? "vehicle"= "car"
? "fail_fast"= "true"
? "turn_costs"= "false"


// 
// The [GET endpoint](#operation/getMatrix) has an URL length limitation, which hurts for many locations per request.
// In those cases use this POST endpoint with a JSON as input. The only parameter in the URL will be the key.
// Both request scenarios are identical except that all singular parameter names are named as their plural for a POST request.
// The effected parameters are: `points`, `from_points`, `to_points`, and `out_arrays`. For the remaining parameters
// please refer to the [guide of the GET endpoint](#operation/getMatrix).
// 
// **Please note that in contrast to GET endpoint the points have to be specified as `longitude, latitude` pairs (in that order, similar to [GeoJson](http://geojson.org/geojson-spec.html#examples))**.
// 
// For example the query `point=10,11&point=20,22&vehicle=car` will be converted to the following JSON:
// ```json
// { "points": [[11,10], [22,20]], "vehicle": "car" }
// ```
// 
// A complete curl Example:
// ```bash
// curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix?key=[YOUR_KEY]" -d '{"elevation":false,"out_arrays":["weights", "times"],"from_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"to_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"vehicle":"car"}'
// ```

@name("POST Matrix Endpoint") : "base-inherit-auth"
POST "https://{{baseUrl}}/matrix"
"Content-Type": "application/json"
json({
    "fail_fast": true,
    "from_curbsides": [
        "<string>",
        "<string>"
    ],
    "from_point_hints": [
        "<string>",
        "<string>"
    ],
    "from_points": [
        [
            "<double>",
            "<double>"
        ],
        [
            "<double>",
            "<double>"
        ]
    ],
    "out_arrays": [
        "<string>",
        "<string>"
    ],
    "snap_preventions": [
        "<string>",
        "<string>"
    ],
    "to_curbsides": [
        "<string>",
        "<string>"
    ],
    "to_point_hints": [
        "<string>",
        "<string>"
    ],
    "to_points": [
        [
            "<double>",
            "<double>"
        ],
        [
            "<double>",
            "<double>"
        ]
    ],
    "turn_costs": false,
    "vehicle": {
        "value": "<Error: Could not resolve allOf schema"
    }
})


// Prefer the [synchronous endpoint](#operation/postMatrix) and use this Batch endpoint for long running problems only.
// 
// The Batch Matrix endpoint allows using matrices with more locations and works asynchronously - similar to the [Batch Route Optimization endpoint](#operation/asyncVRP):
//  * Create a HTTP POST request against `/matrix/calculate` and add the key in the URL: `/matrix/calculate?key=[YOUR_KEY]`. This will give you the `job_id` from the response json like `{ "job_id": "7ac65787-fb99-4e02-a832-2c3010c70097" }`
//  * Poll via HTTP GET requests every 500ms against `/matrix/solution/[job_id]`
// 
// Here are some full examples via curl:
// ```bash
// $ curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix/calculate?key=[YOUR_KEY]" -d '{"points":[[13.29895,52.48696],[13.370876,52.489575],[13.439026,52.511206]]}'
// {"job_id":"7ac65787-fb99-4e02-a832-2c3010c70097"}
// ```
// 
// Pick the returned `job_id` and use it in the next GET requests:
// ```bash
// $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
// {"status":"waiting"}
// ```
// 
// When the calculation is finished (`status:finished`) the JSON response will contain the full matrix JSON under `solution`:
// ```bash
// $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
// {"solution":{"weights":[[0.0,470.453,945.414],[503.793,0.0,580.871],[970.49,569.511,0.0]],"info":{"copyrights":["GraphHopper","OpenStreetMap contributors"]}},"status":"finished"}
// ```
// 
// Please note that if an error occured while calculation the JSON will not have a status but contain directly the error message e.g.:
// ```json
// {"message":"Cannot find from_points: 1","hints":[{...}]}
// ```

@name("Batch Matrix Endpoint") : "base-inherit-auth"
POST "https://{{baseUrl}}/matrix/calculate"
"Content-Type": "application/json"
json({
    "fail_fast": true,
    "from_curbsides": [
        "<string>",
        "<string>"
    ],
    "from_point_hints": [
        "<string>",
        "<string>"
    ],
    "from_points": [
        [
            "<double>",
            "<double>"
        ],
        [
            "<double>",
            "<double>"
        ]
    ],
    "out_arrays": [
        "<string>",
        "<string>"
    ],
    "snap_preventions": [
        "<string>",
        "<string>"
    ],
    "to_curbsides": [
        "<string>",
        "<string>"
    ],
    "to_point_hints": [
        "<string>",
        "<string>"
    ],
    "to_points": [
        [
            "<double>",
            "<double>"
        ],
        [
            "<double>",
            "<double>"
        ]
    ],
    "turn_costs": false,
    "vehicle": {
        "value": "<Error: Could not resolve allOf schema"
    }
})


// This endpoint returns the solution of a JSON submitted to the Batch Matrix endpoint. You can fetch it with the job_id, you have been sent.

@name("GET Batch Matrix Endpoint") : "base-inherit-auth"
GET "https://{{baseUrl}}/matrix/solution/:jobId"



