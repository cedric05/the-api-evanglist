#!/usr/bin/env dothttp

# imported from 35240-cc40b3de-1093-44e1-94c4-498c2fe3c9bb.postman_collection.json

// base-inherit-auth

@name("base-inherit-auth")
GET "https://"
basicauth("{{atlassian_email}}", "{{atlassian_token}}")


// Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Get Change Logs") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey/changelog"
? "startAt"= "0"
? "maxResults"= "100"


// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
// 
// The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
// 
// Creating a subtask differs from creating an issue as follows:
// 
//  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
//  *  `parent` must contain the ID or key of the parent issue.
// 
// In a next-gen project any issue may be made a child providing that the parent and child are members of the same project. In a classic project the parent field is only valid for subtasks.
// 
// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.

@name("Create Issue") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/issue"
"Content-Type": "application/json"
? "updateHistory"= "false"
json({
    "transition": {
        "id": "<string>",
        "looped": "<boolean>"
    },
    "fields": "<object>",
    "update": "<object>",
    "historyMetadata": {
        "type": "<string>",
        "description": "<string>",
        "descriptionKey": "<string>",
        "activityDescription": "<string>",
        "activityDescriptionKey": "<string>",
        "emailDescription": "<string>",
        "emailDescriptionKey": "<string>",
        "actor": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "generator": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "cause": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "extraData": "<object>"
    },
    "properties": [
        {
            "key": "<string>",
            "value": {}
        },
        {
            "key": "<string>",
            "value": {}
        }
    ]
})


// Creates issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
// 
// The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
// 
// Creating a subtask differs from creating an issue as follows:
// 
//  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
//  *  `parent` the must contain the ID or key of the parent issue.
// 
// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.

@name("Bulk Create Issue") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/issue/bulk"
"Content-Type": "application/json"
json({
    "issueUpdates": [
        {
            "transition": {
                "id": "<string>",
                "looped": "<boolean>"
            },
            "fields": "<object>",
            "update": "<object>",
            "historyMetadata": {
                "type": "<string>",
                "description": "<string>",
                "descriptionKey": "<string>",
                "activityDescription": "<string>",
                "activityDescriptionKey": "<string>",
                "emailDescription": "<string>",
                "emailDescriptionKey": "<string>",
                "actor": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "generator": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "cause": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "extraData": "<object>"
            },
            "properties": [
                {
                    "key": "<string>",
                    "value": {}
                },
                {
                    "key": "<string>",
                    "value": {}
                }
            ]
        },
        {
            "transition": {
                "id": "<string>",
                "looped": "<boolean>"
            },
            "fields": "<object>",
            "update": "<object>",
            "historyMetadata": {
                "type": "<string>",
                "description": "<string>",
                "descriptionKey": "<string>",
                "activityDescription": "<string>",
                "activityDescriptionKey": "<string>",
                "emailDescription": "<string>",
                "emailDescriptionKey": "<string>",
                "actor": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "generator": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "cause": {
                    "id": "<string>",
                    "displayName": "<string>",
                    "displayNameKey": "<string>",
                    "type": "<string>",
                    "avatarUrl": "<string>",
                    "url": "<string>"
                },
                "extraData": "<object>"
            },
            "properties": [
                {
                    "key": "<string>",
                    "value": {}
                },
                {
                    "key": "<string>",
                    "value": {}
                }
            ]
        }
    ]
})


// Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
// 
// The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.

@name("Get Create Issue Metadata") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/issue/createmeta"
? "projectIds"= "<string>"
? "projectKeys"= "<string>"
? "issuetypeIds"= "<string>"
? "issuetypeNames"= "<string>"
? "expand"= "<string>"


// Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
// 
// This operation returns two lists:
// 
//  *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
//  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:** None.

@name("Get Issue Picker Suggestions") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/issue/picker"
? "query"= "<string>"
? "currentJQL"= "<string>"
? "currentIssueKey"= "<string>"
? "currentProjectId"= "<string>"
? "showSubTasks"= "<boolean>"
? "showSubTaskParent"= "<boolean>"


// Returns the details for an issue.
// 
// The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Get Issue") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey"
? "fields"= "*all"
? "fieldsByKeys"= "false"
? "expand"= "<string>"
? "properties"= "null"
? "updateHistory"= "false"


// Edits an issue. A transition may be applied and issue properties updated as part of the edit.
// 
// The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
// 
// The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
// 
// Connect app users with admin permissions (from user permissions and app scopes) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Edit Issue") : "base-inherit-auth"
PUT "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey"
"Content-Type": "application/json"
? "notifyUsers"= "true"
? "overrideScreenSecurity"= "false"
? "overrideEditableFlag"= "false"
json({
    "transition": {
        "id": "<string>",
        "looped": "<boolean>"
    },
    "fields": "<object>",
    "update": "<object>",
    "historyMetadata": {
        "type": "<string>",
        "description": "<string>",
        "descriptionKey": "<string>",
        "activityDescription": "<string>",
        "activityDescriptionKey": "<string>",
        "emailDescription": "<string>",
        "emailDescriptionKey": "<string>",
        "actor": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "generator": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "cause": {
            "id": "<string>",
            "displayName": "<string>",
            "displayNameKey": "<string>",
            "type": "<string>",
            "avatarUrl": "<string>",
            "url": "<string>"
        },
        "extraData": "<object>"
    },
    "properties": [
        {
            "key": "<string>",
            "value": {}
        },
        {
            "key": "<string>",
            "value": {}
        }
    ]
})


// Deletes an issue.
// 
// An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Delete Issue") : "base-inherit-auth"
DELETE "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey"
? "deleteSubtasks"= "false"


// Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
// 
// If `name` or `accountId` is set to:
// 
//  *  `"-1"`, the issue is assigned to the default assignee for the project.
//  *  `null`, the issue is set to unassigned.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Assign Issue") : "base-inherit-auth"
PUT "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey/assignee"
"Content-Type": "application/json"
json({
    "key": "<string>",
    "accountId": "<string>",
    "name": "<string>"
})


// Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
// 
// Note that:
// 
//  *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
//  *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
// 
// The following example uploads a file called *myfile.txt* to the issue *TEST-123*:
// 
// `curl -D- -u admin:admin -X POST -H "X-Atlassian-Token: no-check" -F "file=@myfile.txt" https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments`
// 
// Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:** 
// 
//  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Add Attachment") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey/attachments"
"Content-Type": "multipart/form-data"
files(
	("0", "<"),
	("1", "b"),
	("2", "i"),
	("3", "n"),
	("4", "a"),
	("5", "r"),
	("6", "y"),
	("7", ">")
)


// Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
// 
// Connect app users with admin permissions (from user permissions and app scopes) can return additional details using:
// 
//  *  `overrideScreenSecurity` Returns hidden fields.
//  *  `overrideEditableFlag` Returns uneditable fields. For example, where an issue has a workflow status of closed none of its fields are editable.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
// 
// Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.

@name("Get Edit Issue Metadata") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey/editmeta"
? "overrideScreenSecurity"= "false"
? "overrideEditableFlag"= "false"


// Creates an email notification for an issue and adds it to the mail queue.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Send Notification For Issue") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/issue/:issueIdOrKey/notify"
"Content-Type": "application/json"
json({
    "subject": "<string>",
    "textBody": "<string>",
    "htmlBody": "<string>",
    "to": {
        "reporter": "<boolean>",
        "assignee": "<boolean>",
        "watchers": "<boolean>",
        "voters": "<boolean>",
        "users": [
            {
                "self": "dolor dolore",
                "name": "quis officia et ullamco",
                "key": "pariatur",
                "accountId": "s",
                "emailAddress": "commodo reprehenderit dolore nisi officia",
                "avatarUrls": {
                    "16x16": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "24x24": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "32x32": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "48x48": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                },
                "displayName": "veniam dolor id Excepteur",
                "active": false,
                "timeZone": "dolor cillum amet",
                "accountType": "sint ut"
            },
            {
                "self": "nostrud cillum labore",
                "name": "minim dolor Duis",
                "key": "ad aliquip deserunt Excepteur cupidatat",
                "accountId": "qu",
                "emailAddress": "ipsum nisi",
                "avatarUrls": {
                    "16x16": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "24x24": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "32x32": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    },
                    "48x48": {
                        "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                },
                "displayName": "nostrud dolore",
                "active": true,
                "timeZone": "proident",
                "accountType": "veniam occaecat ex aliqua"
            }
        ],
        "groups": [
            {
                "name": "<string>"
            },
            {
                "name": "<string>"
            }
        ]
    },
    "restrict": {
        "groups": [
            {
                "name": "<string>"
            },
            {
                "name": "<string>"
            }
        ],
        "permissions": [
            {
                "id": "<string>",
                "key": "<string>"
            },
            {
                "id": "<string>",
                "key": "<string>"
            }
        ]
    }
})



