#!/usr/bin/env dothttp

# imported from 35240-cc40b3de-1093-44e1-94c4-498c2fe3c9bb.postman_collection.json

// base-inherit-auth

@name("base-inherit-auth")
GET "https://"
basicauth("{{atlassian_email}}", "{{atlassian_token}}")


// Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
// 
// This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
// 
// If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:**
// 
//  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
//  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
//  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.

@name("Create Issue Link") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/issueLink"
"Content-Type": "application/json"
json({
    "inwardIssue": {
        "id": "<string>",
        "key": "<string>"
    },
    "outwardIssue": {
        "id": "<string>",
        "key": "<string>"
    },
    "type": {
        "id": "<string>",
        "name": "<string>",
        "inward": "<string>",
        "outward": "<string>"
    },
    "comment": {
        "body": {},
        "visibility": {
            "type": "<string>",
            "value": "<string>"
        },
        "properties": [
            {
                "key": "<string>",
                "value": {}
            },
            {
                "key": "<string>",
                "value": {}
            }
        ]
    }
})



