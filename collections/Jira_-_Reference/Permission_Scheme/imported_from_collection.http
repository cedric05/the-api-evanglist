#!/usr/bin/env dothttp

# imported from 35240-cc40b3de-1093-44e1-94c4-498c2fe3c9bb.postman_collection.json

// base-inherit-auth

@name("base-inherit-auth")
GET "https://"
basicauth("{{atlassian_email}}", "{{atlassian_token}}")


// Returns all permission schemes.
// 
// ### About permission schemes and grants ###
// 
// A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
// 
// #### Holder object ####
// 
// The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"`. The `holder` object is defined by the following properties:
// 
//  *  `type` Identifies the user or group (see the list of types below).
//  *  `parameter` The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
// 
// The following `types` are available. The expected values for the `parameter` are given in parenthesis (some `types` may not have a `parameter`):
// 
//  *  `anyone` Grant for anonymous users.
//  *  `applicationRole` Grant for users with access to the specified application (application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
//  *  `assignee` Grant for the user currently assigned to an issue.
//  *  `group` Grant for the specified group (group name).
//  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (custom field ID).
//  *  `projectLead` Grant for a project lead.
//  *  `projectRole` Grant for the specified project role (project role ID).
//  *  `reporter` Grant for the user who reported the issue.
//  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
//  *  `user` Grant for the specified user (user ID - historically this was the userkey but that is deprecated and the account ID should be used).
//  *  `userCustomField` Grant for a user selected in the specified custom field (custom field ID).
// 
// #### Built-in permissions ####
// 
// The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
// 
// **Project permissions**
// 
//  *  `ADMINISTER_PROJECTS`
//  *  `BROWSE_PROJECTS`
//  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
//  *  `SERVICEDESK_AGENT` (Jira Service Desk only)
//  *  `VIEW_DEV_TOOLS` (Jira Software only)
//  *  `VIEW_READONLY_WORKFLOW`
// 
// **Issue permissions**
// 
//  *  `ASSIGNABLE_USER`
//  *  `ASSIGN_ISSUES`
//  *  `CLOSE_ISSUES`
//  *  `CREATE_ISSUES`
//  *  `DELETE_ISSUES`
//  *  `EDIT_ISSUES`
//  *  `LINK_ISSUES`
//  *  `MODIFY_REPORTER`
//  *  `MOVE_ISSUES`
//  *  `RESOLVE_ISSUES`
//  *  `SCHEDULE_ISSUES`
//  *  `SET_ISSUE_SECURITY`
//  *  `TRANSITION_ISSUES`
// 
// **Voters and watchers permissions**
// 
//  *  `MANAGE_WATCHERS`
//  *  `VIEW_VOTERS_AND_WATCHERS`
// 
// **Comments permissions**
// 
//  *  `ADD_COMMENTS`
//  *  `DELETE_ALL_COMMENTS`
//  *  `DELETE_OWN_COMMENTS`
//  *  `EDIT_ALL_COMMENTS`
//  *  `EDIT_OWN_COMMENTS`
// 
// **Attachments permissions**
// 
//  *  `CREATE_ATTACHMENTS`
//  *  `DELETE_ALL_ATTACHMENTS`
//  *  `DELETE_OWN_ATTACHMENTS`
// 
// **Time tracking permissions**
// 
//  *  `DELETE_ALL_WORKLOGS`
//  *  `DELETE_OWN_WORKLOGS`
//  *  `EDIT_ALL_WORKLOGS`
//  *  `EDIT_OWN_WORKLOGS`
//  *  `WORK_ON_ISSUES`
// 
// **[Permissions](#permissions) required:** Permission to access Jira.

@name("Get All Permission Schemes") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/permissionscheme"
? "expand"= "<string>"


// Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
// 
// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

@name("Create Permission Scheme") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/permissionscheme"
"Content-Type": "application/json"
? "expand"= "<string>"
json({
    "name": "<string>",
    "description": "<string>",
    "scope": {
        "type": "TEMPLATE",
        "project": {
            "self": "pariatur Ut et fugiat cillum",
            "id": "commodo mollit",
            "key": "dolore laboris minim ex",
            "name": "Ut est consectetur exercitation",
            "projectTypeKey": "service_desk",
            "simplified": true,
            "avatarUrls": {
                "16x16": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "24x24": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "32x32": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "48x48": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            },
            "projectCategory": {
                "self": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "id": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "description": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                "name": {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            }
        }
    },
    "permissions": [
        {
            "holder": {
                "type": "<string>",
                "parameter": "<string>"
            },
            "permission": "<string>"
        },
        {
            "holder": {
                "type": "<string>",
                "parameter": "<string>"
            },
            "permission": "<string>"
        }
    ]
})



