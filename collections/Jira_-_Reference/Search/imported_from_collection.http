#!/usr/bin/env dothttp

# imported from 35240-cc40b3de-1093-44e1-94c4-498c2fe3c9bb.postman_collection.json

// base-inherit-auth

@name("base-inherit-auth")
GET "https://"
basicauth("{{atlassian_email}}", "{{atlassian_token}}")


// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
// 
// If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:** Issues are included in the response where the user has:
// 
//  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Search For Issues Using Jql (Get)") : "base-inherit-auth"
GET "https://{{baseUrl}}/rest/api/3/search"
? "jql"= "project = {{jira_project}} AND component = {{jira_component}} ORDER BY Rank ASC"
? "startAt"= "0"
? "maxResults"= "50"
? "validateQuery"= "strict"
? "fields"= "*navigable"
? "expand"= "<string>"
? "properties"= "<string>"
? "fieldsByKeys"= "false"


// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
// 
// There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
// 
// This operation can be accessed anonymously.
// 
// **[Permissions](#permissions) required:** Issues are included in the response where the user has:
// 
//  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
//  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

@name("Search For Issues Using Jql (Post)") : "base-inherit-auth"
POST "https://{{baseUrl}}/rest/api/3/search"
"Content-Type": "application/json"
json({
    "jql": "<string>",
    "startAt": "<integer>",
    "maxResults": 50,
    "fields": [
        "<string>",
        "<string>"
    ],
    "validateQuery": "<string>",
    "expand": [
        "<string>",
        "<string>"
    ],
    "properties": [
        "<string>",
        "<string>"
    ],
    "fieldsByKeys": "<boolean>"
})



