#!/usr/bin/env dothttp

# imported from 35240-b72aa038-8bb4-4673-ad3d-58fffe1c4130.postman_collection.json

// Used to activate a token for a digitization that has been approved and provisioned, but requires additional cardholder authentication prior to activation. If the provisioning was not completed successfully, activation cannot be accomplished using Customer Service API. It is expected that a cardholder will complete the authentication process using an issuer's call center or using an issuer-supplied mobile application, and only then should the issuer use this API to activate the token.

@name("/token/activate")
POST "https://{{baseUrl}}/token/activate"
"Content-Type": "application/json"
json({
    "TokenActivateRequest": {
        "ReasonCode": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "AccountPan": "<integer>",
        "CommentText": "<integer>",
        "PaymentAppInstanceId": "<integer>",
        "TokenUniqueReference": "<string>"
    }
})


// Used to retrieve the available Activation Methods for a token that is awaiting activation. Activation Methods are the means by which a cardholder may complete cardholder authentication with the issuer beyond the scope of MDES. It is possible that there are no Activation Methods for a token when an issuer did not provide any cardholder-specific information with the Tokenization Authorization Request (TAR) pre-digitization network message response.

@name("/token/activationmethods")
POST "https://{{baseUrl}}/token/activationmethods"
"Content-Type": "application/json"
json({
    "TokenActivationMethodsRequest": {
        "TokenUniqueReference": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        }
    }
})


// Used to retrieve all comments associated with a token. Typically the response includes comments created earlier by Issuer Customer Service representatives detailing additional information about a particular inquiry or event. There may also be comments with warnings of potential fraud. These comments are created automatically by the MDES system when a Token requestor indicates a high risk of fraud during digitization.

@name("/token/comments")
POST "https://{{baseUrl}}/token/comments"
"Content-Type": "application/json"
json({
    "TokenCommentsRequest": {
        "TokenUniqueReference": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        }
    }
})


// Used to delete a token so that it may not initiate any new transactions. All authorizations for a deleted token will be declined. A deleted token may not be returned to an active state.

@name("/token/delete")
POST "https://{{baseUrl}}/token/delete"
"Content-Type": "application/json"
json({
    "TokenDeleteRequest": {
        "TokenUniqueReference": "<string>",
        "ReasonCode": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "CommentText": "<string>"
    }
})


// Used to trigger the process of generating and sending a new Activation Code (for a specific token) to the cardholder via the requested Activation Method. When successful, a new Activation Code Expiration Date Time period will begin, and a new Activation Code will be sent to the issuer using the Activation Code Notification (ACN) pre-digitization network message. It can only be used to do this for Activation Methods that involve the external distribution of an Activation Code to the cardholder. For example, via email or SMS. It cannot be used to send a new activation code via the "Mobile Application" activation method, for instance. A new Activation Code can be sent even if the previous code has not expired. A new Activation Code can also be sent even after the previous code has expired; however, it can only be done up to 30 days after the token was created  (the number of days is subject to change at the discretion of Mastercard).

@name("/token/resendactivationcode")
POST "https://{{baseUrl}}/token/resendactivationcode"
"Content-Type": "application/json"
json({
    "TokenResendActivationCodeRequest": {
        "TokenUniqueReference": "<string>",
        "ActivationMethodId": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        }
    }
})


// Used to request that the Mobile PIN for a Mastercard Cloud-Based Payment token in a single issuer wallet is reset. The request is passed to the Credential Management System for processing. When the Mobile PIN is a token-level PIN (as opposed to a wallet-level PIN), the cardholder must choose a new PIN within 10 minutes of a Reset Mobile PIN action. Otherwise, the reset will need to be re-requested.

@name("/token/resetmobilepin")
POST "https://{{baseUrl}}/token/resetmobilepin"
"Content-Type": "application/json"
json({
    "TokenResetMobilePinRequest": {
        "TokenUniqueReference": "<string>",
        "ReasonCode": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "CommentText": "<string>"
    }
})


// Used to retrieve the historical statuses and lifecycle events for a token, such as when it was initially activated, subsequently suspended or resumed, and finally deleted.

@name("/token/statushistory")
POST "https://{{baseUrl}}/token/statushistory"
"Content-Type": "application/json"
json({
    "TokenStatusHistoryRequest": {
        "TokenUniqueReference": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        }
    }
})


// Used to suspend an active token so that it may not initiate any new transactions. All authorizations for a SUSPENDED token will be declined. Tokens may be suspended by multiple parties (suspenders) concurrently. The token status is updated from ACTIVE to SUSPENDED when the first suspender triggers a suspend action. Additional suspenders can add their suspend action to the list of suspenders. Suspenders can unsuspend only their own suspend action. All suspenders need to perform an unsuspend action to move a token from SUSPENDED to ACTIVE. The token status will only change when the last suspender has unsuspended the token. <br>For CoF tokens, the only two supported suspenders are issuer and token requestor. <br>For Apple Pay tokens, there are some differences in behavior versus the general principles. An issuer may add themselves as a suspender to a token already suspended by a cardholder, as above. However, a cardholder cannot suspend a token already suspended by the issuer. As a special case for Apple Pay, an issuer may unsuspend (override) a token already suspended by a cardholder. However, a cardholder cannot unsuspend a token already suspended by the issuer.

@name("/token/suspend")
POST "https://{{baseUrl}}/token/suspend"
"Content-Type": "application/json"
json({
    "TokenSuspendRequest": {
        "TokenUniqueReference": "<string>",
        "ReasonCode": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "CommentText": "<string>"
    }
})


// Used to unsuspend or resume a suspended token and return it to the active state where it may initiate new transactions. Tokens may be suspended by multiple parties (suspenders) concurrently. The token status is updated from ACTIVE to SUSPENDED when the first suspender triggers a suspend action. Additional suspenders can add their suspend action to the list of suspenders. Suspenders can unsuspend only their own suspend action. All suspenders need to perform an unsuspend action to move a token from SUSPENDED to ACTIVE. The token status will only change when the last suspender has unsuspended the token. <br>For CoF tokens, the only two supported suspenders are issuer and token requestor.<br>For Apple Pay tokens, there are some differences in behavior versus the general principles. An issuer may add themselves as a suspender to a token already suspended by a cardholder, as above. However, a cardholder cannot suspend a token already suspended by the issuer. As a special case for Apple Pay, an issuer may unsuspend (override) a token already suspended by a cardholder. However, a cardholder cannot unsuspend a token already suspended by the issuer.

@name("/token/unsuspend")
POST "https://{{baseUrl}}/token/unsuspend"
"Content-Type": "application/json"
json({
    "TokenUnsuspendRequest": {
        "TokenUniqueReference": "<string>",
        "ReasonCode": "<string>",
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "CommentText": "<string>"
    }
})


// Used to update Account PAN Mapping Information or Issuer Product Configuration ID associated to a provisioned token. To update a specific token, the API should be requested using the Token Unique Reference. To update all tokens mapped to a specific Account PAN, the API should be requested using the Account PAN. In either case, updates will only be applied to tokens in ACTIVE or SUSPENDED state, not those in IN PROGRESS or DELETED state. When updating Account PAN Mapping Information, the Account PAN, Expiration Date and Sequence Number, may be updated individually or in any combination. Only information provided will be updated. The account mapping will only update an Account PAN for a new Account PAN when they are both in the same Account Range.

@name("/token/update")
POST "https://{{baseUrl}}/token/update"
"Content-Type": "application/json"
json({
    "TokenUpdateRequest": {
        "AuditInfo": {
            "UserId": "<string>",
            "UserName": "<string>",
            "Organization": "<string>",
            "Phone": "<string>"
        },
        "AccountPanSequenceNumber": "<string>",
        "CommentText": "<string>",
        "CurrentAccountPan": "<string>",
        "ExpirationDate": "<string>",
        "IssuerProductConfigurationId": "<string>",
        "NewAccountPan": "<string>",
        "TokenUniqueReference": "<string>",
        "UpdateWalletProviderIndicator": "<string>"
    }
})



