#!/usr/bin/env dothttp

# imported from 35240-ac6561cd-0334-4ee5-8280-57b4086d4c3d.postman_collection.json

// Get Hypermedia links to resources accessible in GitHub's REST API

@name("GitHub API Root")
GET "https://{{baseUrl}}/"


// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.

@name("Create a GitHub App from a manifest")
POST "https://{{baseUrl}}/app-manifests/:code/conversions"


// **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
// 
// If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

@name("Get an app")
GET "https://{{baseUrl}}/apps/:app_slug"


// Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
// 
// The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://developer.github.com/apps/using-content-attachments/)" for details about content attachments.
// 
// You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

@name("Create a content attachment")
POST "https://{{baseUrl}}/content_references/:content_reference_id/attachments"
"Content-Type": "application/json"
json({
    "title": "<string>",
    "body": "<string>"
})


// Lists all the emojis available to use on GitHub.

@name("Get emojis")
GET "https://{{baseUrl}}/emojis"


// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.

@name("List public events")
GET "https://{{baseUrl}}/events"
? "per_page"= "30"
? "page"= "1"


// GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
// 
// *   **Timeline**: The GitHub global public timeline
// *   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)
// *   **Current user public**: The public timeline for the authenticated user
// *   **Current user**: The private timeline for the authenticated user
// *   **Current user actor**: The private timeline for activity created by the authenticated user
// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
// 
// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.

@name("Get feeds")
GET "https://{{baseUrl}}/feeds"


// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
// necessarily assigned to you. See the [Parameters table](https://developer.github.com/v3/issues/#parameters) for more
// information.
// 
// 
// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
// request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.

@name("List issues assigned to the authenticated user")
GET "https://{{baseUrl}}/issues"
? "filter"= "assigned"
? "state"= "open"
? "labels"= "<string>"
? "sort"= "created"
? "direction"= "desc"
? "since"= "<string>"
? "collab"= "<boolean>"
? "orgs"= "<boolean>"
? "owned"= "<boolean>"
? "pulls"= "<boolean>"
? "per_page"= "30"
? "page"= "1"


// This endpoint provides a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."

@name("Get GitHub meta information")
GET "https://{{baseUrl}}/meta"


@name("List public events for a network of repositories")
GET "https://{{baseUrl}}/networks/:owner/:repo/events"
? "per_page"= "30"
? "page"= "1"


// Get the octocat as ASCII art

@name("Get Octocat")
GET "https://{{baseUrl}}/octocat"
? "s"= "<string>"


// Lists all organizations, in the order that they were created on GitHub.
// 
// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.

@name("List organizations")
GET "https://{{baseUrl}}/organizations"
? "since"= "<string>"
? "per_page"= "30"


// **Note:** Accessing this endpoint does not count against your REST API rate limit.
// 
// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.

@name("Get rate limit status for the authenticated user")
GET "https://{{baseUrl}}/rate_limit"


// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
// 
// OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).

@name("Delete a reaction (Legacy)")
DELETE "https://{{baseUrl}}/reactions/:reaction_id"


// Lists all public repositories in the order that they were created.
// 
// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.

@name("List public repositories")
GET "https://{{baseUrl}}/repositories"
? "per_page"= "30"
? "since"= "<string>"
? "visibility"= "<string>"


// Get a random sentence from the Zen of GitHub

@name("Get the Zen of GitHub")
GET "https://{{baseUrl}}/zen"



