#!/usr/bin/env dothttp

# imported from 35240-ac6561cd-0334-4ee5-8280-57b4086d4c3d.postman_collection.json

// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
// 
// You can pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
// 
// To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
// 
// **Signature verification object**
// 
// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
// 
// These are the possible values for `reason` in the `verification` object:
// 
// | Value                    | Description                                                                                                                       |
// | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
// | `expired_key`            | The key that made the signature is expired.                                                                                       |
// | `not_signing_key`        | The "signing" flag is not among the usage flags in the GPG key that made the signature.                                           |
// | `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |
// | `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |
// | `unsigned`               | The object does not include a signature.                                                                                          |
// | `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |
// | `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |
// | `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
// | `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |
// | `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |
// | `malformed_signature`    | There was an error parsing the signature.                                                                                         |
// | `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |
// | `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |

@name("Get a commit")
GET "https://{{baseUrl}}/repos/:owner/:repo/commits/:ref"


// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
// 
// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.

@name("List check runs for a Git reference")
GET "https://{{baseUrl}}/repos/:owner/:repo/commits/:ref/check-runs"
? "check_name"= "<string>"
? "status"= "<string>"
? "filter"= "latest"
? "per_page"= "30"
? "page"= "1"


// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
// 
// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.

@name("List check suites for a Git reference")
GET "https://{{baseUrl}}/repos/:owner/:repo/commits/:ref/check-suites"
? "app_id"= "<integer>"
? "check_name"= "<string>"
? "per_page"= "30"
? "page"= "1"


// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
// 
// The most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.
// 
// Additionally, a combined `state` is returned. The `state` is one of:
// 
// *   **failure** if any of the contexts report as `error` or `failure`
// *   **pending** if there are no statuses or a context is `pending`
// *   **success** if the latest status for all contexts is `success`

@name("Get the combined status for a specific reference")
GET "https://{{baseUrl}}/repos/:owner/:repo/commits/:ref/status"


// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
// 
// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.

@name("List commit statuses for a reference")
GET "https://{{baseUrl}}/repos/:owner/:repo/commits/:ref/statuses"
? "per_page"= "30"
? "page"= "1"



