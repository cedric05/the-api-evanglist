#!/usr/bin/env dothttp

# imported from 35240-ac6561cd-0334-4ee5-8280-57b4086d4c3d.postman_collection.json

// Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
// `:path`, you will receive the contents of all files in the repository.
// 
// Files and symlinks support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) for
// retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
// type](https://developer.github.com/v3/repos/contents/#custom-media-types) to ensure the content is returned in a consistent
// object format.
// 
// **Note**:
// *   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).
// *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
// API](https://developer.github.com/v3/git/trees/#get-a-tree).
// *   This API supports files up to 1 megabyte in size.
// 
// #### If the content is a directory
// The response will be an array of objects, one object for each item in the directory.
// When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
// _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
// In the next major version of the API, the type will be returned as "submodule".
// 
// #### If the content is a symlink 
// If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
// API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object 
// describing the symlink itself.
// 
// #### If the content is a submodule
// The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
// commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
// the submodule at that specific commit.
// 
// If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
// github.com URLs (`html_url` and `_links["html"]`) will have null values.

@name("Get repository content")
GET "https://{{baseUrl}}/repos/:owner/:repo/contents/:path"
? "ref"= "<string>"


// Creates a new file or replaces an existing file in a repository.

@name("Create or update file contents")
PUT "https://{{baseUrl}}/repos/:owner/:repo/contents/:path"
"Content-Type": "application/json"
json({
    "message": "<string>",
    "content": "<string>",
    "sha": "<string>",
    "branch": "<string>",
    "committer": {
        "name": "<string>",
        "email": "<string>",
        "date": "<string>"
    },
    "author": {
        "name": "<string>",
        "email": "<string>",
        "date": "<string>"
    }
})


// Deletes a file in a repository.
// 
// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
// 
// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
// 
// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.

@name("Delete a file")
DELETE "https://{{baseUrl}}/repos/:owner/:repo/contents/:path"
"Content-Type": "application/json"
json({
    "message": "<string>",
    "sha": "<string>",
    "branch": "<string>",
    "committer": {
        "name": "<string>",
        "email": "<string>"
    },
    "author": {
        "name": "<string>",
        "email": "<string>"
    }
})



