#!/usr/bin/env dothttp

# imported from 35240-dd87bfa6-db1a-4bc7-933b-f90982450ad5.postman_collection.json

// Deletes a set of [CatalogItem](#type-catalogitem)s based on thenprovided list of target IDs and returns a set of successfully deleted IDs innthe response. Deletion is a cascading event such that all children of thentargeted object are also deleted. For example, deleting a CatalogItem willnalso delete all of its [CatalogItemVariation](#type-catalogitemvariation)nchildren.nn`BatchDeleteCatalogObjects` succeeds even if only a portion of the targetednIDs can be deleted. The response will only includ

@name("Post Catalog Batch Delete")
POST "https://{{baseUrl}}/v2/catalog/batch-delete"


// Returns a set of objects based on the provided ID.nEach [CatalogItem](#type-catalogitem) returned in the set includes all of itsnchild information including: all of itsn[CatalogItemVariation](#type-catalogitemvariation) objects, references tonits [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids ofnany [CatalogTax](#type-catalogtax) objects that apply to it.

@name("Post Catalog Batch Retrieve")
POST "https://{{baseUrl}}/v2/catalog/batch-retrieve"


// Creates or updates up to 10,000 target objects based on the providednlist of objects. The target objects are grouped into batches and each batch isninserted/updated in an all-or-nothing manner. If an object within a batch isnmalformed in some way, or violates a database constraint, the entire batchncontaining that item will be disregarded. However, other batches in the samenrequest may still succeed. Each batch may contain up to 1,000 objects, andnbatches will be processed in order as long as th

@name("Post Catalog Batch Upsert")
POST "https://{{baseUrl}}/v2/catalog/batch-upsert"


// Returns information about the Square Catalog API, such as batch sizenlimits for `BatchUpsertCatalogObjects`.

@name("Get Catalog Info")
GET "https://{{baseUrl}}/v2/catalog/info"


// Returns a list of [CatalogObject](#type-catalogobject)s that includesnall objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem)nand [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameternis specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types:n`ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.

@name("Get Catalog List")
GET "https://{{baseUrl}}/v2/catalog/list"
? "cursor"= "<string>"
? "types"= "<string>"


// Queries the targeted catalog using a variety of query typesn([CatalogQuerySortedAttribute](#type-catalogquerysortedattribute),n([CatalogQueryExact](#type-catalogqueryexact),n([CatalogQueryRange](#type-catalogqueryrange),n([CatalogQueryText](#type-catalogquerytext),n([CatalogQueryItemsForTax](#type-catalogqueryitemsfortax),n([CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist)).

@name("Post Catalog Search")
POST "https://{{baseUrl}}/v2/catalog/search"


// Updates the [CatalogModifierList](#type-catalogmodifierlist) objectsnthat apply to the targeted [CatalogItem](#type-catalogitem) without havingnto perform an upsert on the entire item.

@name("Post Catalog Update Item Modifier Lists")
POST "https://{{baseUrl}}/v2/catalog/update-item-modifier-lists"


// Updates the [CatalogTax](#type-catalogtax) objects that apply to thentargeted [CatalogItem](#type-catalogitem) without having to perform annupsert on the entire item.

@name("Post Catalog Update Item Taxes")
POST "https://{{baseUrl}}/v2/catalog/update-item-taxes"



